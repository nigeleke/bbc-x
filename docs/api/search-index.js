var searchIndex = new Map(JSON.parse('[\
["bbc_x",{"doc":"","t":"CCHCCCCHCCFPPGNNNNNNNNNNNNNNNONNNNNNNNNNNONONONONNNOONNNNNNNNNFONCCCNNHNCNNNNNNNCNNNNFNNNNNNHNNNNHFIIPPIPPPOONNNNNNNNPPPPFGFPIPPPPPIIGPPPPPPPPPIPIGPPPPIPIPIPIPPPPPPPPPPPPPPPPIPPGPPPPGPIPPGPPPPPGPIPPPIPPPPPPPPPPPPPIPPPPGFGPPPPIIPPPPPPPPPPPPPPPPPPPPPPPONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOFHHHHHHHNNNHHHHHHNHHHHHHNHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHNNHNHHFNNNNNNNNFONNNNNNNNNNNFNNNNNNNNPPGNNNNNNNNNNFNNNNNNNNOONNNNNKMMMPPPPGPPPPINNNNNNNNNNNN","n":["args","bbc3","bbc_x","bbcx","core","language","list_writer","main","model","result","Args","Bbc3","BbcX","Language","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","command","command_for_update","eq","eq","files","files","fmt","fmt","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","into","into","language","language","list","list","list_path","list_path","run","run","to_owned","to_owned","to_possible_value","trace","trace_path","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","Bbc3","args","assemble","assembler","assembly","ast","borrow","borrow_mut","file_lines","from","grammar","impl_assemble","impl_list","impl_parse","impl_run","into","list","new","parser","run","try_from","try_into","type_id","Assembler","assemble","borrow","borrow_mut","eq","fmt","from","generate_code","into","try_from","try_into","type_id","validate_ast","Assembly","Code","Content","FWord","IWord","Location","Octal","PWord","SWord","_code","base","borrow","borrow_mut","from","into","new","try_from","try_into","type_id","ADD","AND","ARCTAN","AbsoluteAddress","Acc","Address","AddressOperand","AddressOperand","AddressRef","CAPTN","CHYP","CLR","COS","CYCR","Character","Comment","ConstOperand","ConstOperand","DECR","DVD","DirectAddress","EXEC","EXP","F","FLOAT","FRAC","FWord","FWord","FloatType","GeneralOperand","I","INCR","INT","IPUT","IWord","IWord","Identifier","Identifier","Index","IndirectAddress","IntType","JEZ","JGZ","JLIK","JLZ","JNZ","JOI","JUMP","LDN","LDR","LIBR","LINE","LN","LibraryMnemonic","LoadN","LoadR","LoadRConst","Location","MOD","MPLY","Mnemonic","NEG","NEQV","NOT","NTHG","NumericAddress","NumericAddress","NumericCharacter","OPUT","OR","Octal","Octal","Octal","P","PRINT","PUT","PWord","PWord","Punctuation","PutType","READ","RelativeAddress","RelativeRef","S","SHFR","SIN","SKAE","SKAG","SKAL","SKAN","SKET","SLIK","SNLZ","SQRT","STOP","SUBT","SWord","SWord","SWord","SignedFWord","SignedInteger","SimpleAddressOperand","SourceProgramLine","SourceProgramWord","TAKE","TAN","TYPE","TakeType","TypeDesignator","WordValue","XADD","XAND","XCHYP","XCLR","XCYCR","XDECR","XDVD","XEXEC","XINCR","XIPUT","XMOD","XMPLY","XNEG","XNEQV","XNOT","XNTHG","XOPUT","XOR","XPUT","XSHFR","XSUBT","XTAKE","XTYPE","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","into","into","into","into","into","into","into","into","into","into","into","into","location","location","new","new","source_program_word","source_program_word","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","vec","vec","Grammar","absolute_address","acc","actual_character","address","address_operand","alpha_character","alpha_numeric","bbc3_line","borrow","borrow_mut","comment","const_operand","decimal_part","digit","exact","exponent_part","from","fword","general_operand","identifier","index","index_ref","inline_ws","into","iword","jump_mnemonic","ldn_mnemonic","ldr_mnemonic","library_mnemonic","library_mnemonic_pword","loadn_pword","loadr_const_pword","loadr_pword","location","n0_15_mnemonc","n0_15_xmnemonic","n16_22_mnemonic","n16_22_xmnemonic","numeric_address","numeric_character","oct_dig","octal","octal_word","punctuation","put_type_mnemonic","put_type_pword","pword","relative_address","sign","signed_fword","signed_integer","simple_address_operand","skip_mnemonic","source_program_line","source_program_word","subscript10","sword","take_type_mnemonic","take_type_pword","try_from","try_into","type_designator","type_id","unsigned_fword","unsigned_integer","Parser","borrow","borrow_mut","from","into","parse_line","try_from","try_into","type_id","BbcX","_args","assemble","borrow","borrow_mut","from","into","list","new","run","try_from","try_into","type_id","Core","borrow","borrow_mut","build_all","from","into","try_from","try_into","type_id","Bbc3","BbcX","Language","assemble","borrow","borrow_mut","from","into","list","run","try_from","try_into","type_id","ListWriter","add_line_to_listing","add_lines_to_listing","add_title_to_listing","borrow","borrow_mut","from","get_list_file","into","list_file","listing","new","try_from","try_into","type_id","write_content_to_file","LanguageModel","assemble","list","run","BuildErrors","CannotReadFile","CannotToWriteFile","Err","Error","FailedToAssemble","FailedToParse","FailedToRun","Ok","Result","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":[[0,"bbc_x"],[10,"bbc_x::args"],[62,"bbc_x::bbc3"],[85,"bbc_x::bbc3::assembler"],[98,"bbc_x::bbc3::assembly"],[117,"bbc_x::bbc3::ast"],[432,"bbc_x::bbc3::grammar"],[498,"bbc_x::bbc3::parser"],[507,"bbc_x::bbcx"],[520,"bbc_x::core"],[529,"bbc_x::language"],[542,"bbc_x::list_writer"],[558,"bbc_x::model"],[562,"bbc_x::result"],[584,"alloc::string"],[585,"alloc::vec"],[586,"core::result"],[587,"clap_builder::builder::command"],[588,"std::path"],[589,"core::iter::traits::iterator"],[590,"core::fmt"],[591,"core::fmt"],[592,"clap_builder"],[593,"clap_builder::util::id"],[594,"core::option"],[595,"clap_builder::builder::possible_value"],[596,"core::any"],[597,"std::path"],[598,"core::fmt"],[599,"std::io::error"]],"d":["","","","","","","","","","","Resurrection of the educational BBC-X assembler language …","","","","","","","","","","","","","","","","","","","The source file(s) to be compiled and / or run.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Specify the source file language. It is expected that all …","","Create listing files during compilation. The list files …","","The folder where the list files will be written. If not …","","Run the file(s) following successfully compillation. If …","","","","Trace a file when it is executed. The trace files will be …","The folder where the trace output files will be written. …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Contains the error value","","","","","Contains the success value","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,7,7,0,8,8,7,8,7,8,7,8,7,8,8,8,7,8,8,8,7,8,7,8,8,8,8,8,7,8,8,8,8,8,8,8,8,8,7,8,7,8,8,7,8,7,8,7,8,8,8,7,0,22,22,0,0,0,22,22,0,22,0,22,22,22,22,22,22,22,0,22,22,22,22,0,26,26,26,26,26,26,0,26,26,26,26,0,0,0,0,52,52,0,52,52,52,24,53,24,24,24,24,24,24,24,24,39,39,39,38,0,0,0,33,0,39,39,39,39,39,0,0,0,33,39,39,36,39,39,32,39,39,0,28,0,0,32,39,39,39,0,28,0,37,0,36,0,39,39,39,39,39,39,39,39,39,39,39,39,30,30,30,30,0,39,39,0,39,39,39,39,0,37,0,39,39,0,28,35,32,39,39,0,28,0,30,39,38,0,32,39,39,39,39,39,39,39,39,39,39,39,39,0,28,35,35,35,0,0,0,39,39,39,30,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,34,25,28,30,31,32,33,34,35,36,37,38,39,25,28,30,31,32,33,34,35,36,37,38,39,25,28,30,31,32,33,34,35,36,37,38,39,25,28,30,31,32,33,34,35,36,37,38,39,25,25,28,30,31,32,33,34,35,36,37,38,39,25,25,28,28,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,25,28,30,31,31,31,32,33,34,35,36,37,38,39,34,25,28,30,31,32,33,34,35,36,37,38,39,25,25,25,34,25,25,25,28,30,31,32,33,34,35,36,37,38,39,25,28,30,31,32,33,34,35,36,37,38,39,25,28,30,31,32,33,34,35,36,37,38,39,25,28,30,31,32,33,34,35,36,37,38,39,25,28,30,31,32,33,34,35,36,37,38,39,54,55,56,0,0,0,0,0,0,0,0,57,57,57,0,0,0,0,0,0,57,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,0,57,0,0,0,58,58,58,58,58,58,58,58,0,47,47,47,47,47,47,47,47,47,47,47,47,0,59,59,59,59,59,59,59,59,48,48,0,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,51,51,51,4,4,4,60,0,4,4,4,60,0,4,4,4,4,4,4,4,4,4,4,4,4],"f":"``{{{d{b}}}{{j{fh}}}}````{{}f}``````{ll}0{ce{}{}}000{nn}{A`A`}{{ce}f{}{}}0{{}l}0{{nn}Ab}{{A`A`}Ab}{A`{{`{{Ah{}{{Ad{Af}}}}}}}}`{{nAj}Al}{{A`Aj}Al}{cc{}}0{{{d{b}}}A`}{An{{j{A`B`}}}}0{{}{{Bd{Bb}}}}=={A`n}`{A`Ab}`{A`{{Bd{Af}}}}`1`{ce{}{}}0{n{{Bd{Bf}}}}``{c{{j{e}}}{}{}}000{cBh{}}0{{A`An}{{j{fB`}}}}0{{}{{Bj{n}}}}``{{BlBn}{{j{fh}}}}```66{Bn{{j{{d{b}}h}}}}>`{{BlBn}{{j{C`h}}}}2{{BlBn}{{j{{d{{j{Cbh}}}}h}}}}393{A`Bl}`4887`{{{Bj{Cb}}}{{j{C`h}}}};;{{CdCd}Ab}{{CdAj}Al}{cc{}}{{{Bj{Cb}}}{{Cj{CfCh}}}}?==<{{{Bj{Cb}}}{{j{fh}}}}```````````{ce{}{}}030{{{Cj{CfCh}}}C`}{c{{j{e}}}{}{}}0{cBh{}}``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````333333333333333333333333{CbCb}{ChCh}{ClCl}{CnCn}{D`D`}{DbDb}{DdDd}{DfDf}{DhDh}{DjDj}{DlDl}{DnDn}{{ce}f{}{}}00000000000`{{CbCb}Ab}{{ChCh}Ab}{{ClCl}Ab}{{CnCn}Ab}{{D`D`}Ab}{{DbDb}Ab}{{DdDd}Ab}{{DfDf}Ab}{{DhDh}Ab}{{DjDj}Ab}{{DlDl}Ab}{{DnDn}Ab}{{CbAj}Al}{{CbAj}{{j{fE`}}}}{{ChAj}Al}{{ChAj}{{j{fE`}}}}{{ClAj}{{j{fE`}}}}{{ClAj}Al}{{CnAj}{{j{fE`}}}}{{CnAj}Al}{{D`Aj}{{j{fE`}}}}{{D`Aj}Al}{{DbAj}{{j{fE`}}}}{{DbAj}Al}{{DdAj}{{j{fE`}}}}{{DdAj}Al}{{DfAj}{{j{fE`}}}}{{DfAj}Al}{{DhAj}Al}{{DhAj}{{j{fE`}}}}{{DjAj}Al}{{DjAj}{{j{fE`}}}}{{DlAj}Al}{{DlAj}{{j{fE`}}}}{{DnAj}{{j{fE`}}}}{{DnAj}Al}{cc{}}000{{{Bd{Eb}}}Cn}{EbCn}22222222`{ce{}{}}00000000000{CbCf}`{{CfChb}Cb}{{Dh{Bd{Cf}}}Dd}{CbCh}`444444444444{cb{}}00000000000{c{{j{e}}}{}{}}00000000000000000000000{cBh{}}00000000000````{{}{{Ed{Cf}}}}{{}{{Ed{Cn}}}}{{}{{Ed{Eb}}}}{{}{{Ed{Dj}}}}{{}{{Ed{Dd}}}}22{{}{{Ed{Cb}}}}=={{}{{Ed{b}}}}{{}{{Ed{Df}}}}15{Ef{{Ed{b}}}}2{cc{}}{{}{{Ed{Eh}}}}{{}{{Ed{Db}}}}5;;5{ce{}{}}{{}{{Ed{Ej}}}}{{}{{Ed{Dn}}}}000{{}{{Ed{Cl}}}}000?1111{{}{{Ed{Dl}}}}>>{{}{{Ed{D`}}}}{{}{{Ed{El}}}}{{}{{Ed{Eb}}}}544{{}{{Ed{Cf}}}}>:7{{}{{Ed{Dh}}}}7{{}{{Ed{Cb}}}}{{}{{Ed{Ch}}}}4{{}{{Ed{b}}}}:9{c{{j{e}}}{}{}}06{cBh{}}{{}{{Ed{Eh}}}}>`??{cc{}}{ce{}{}}{Ef{{j{Cbh}}}}554``{{EnBn}{{j{fh}}}}22320{A`En}1776`33{A`{{j{fh}}}}54887```{{F`Bn}{{j{fh}}}}556500998`{{FbEf}f}0{{FbBn}f}778{{BnA`}{{Bd{Af}}}}8``{{BnA`}Fb}==<{Fb{{j{fFd}}}}`{{FfBn}{{j{fh}}}}00``````````;;{hh}{{ce}f{}{}}{{hh}Ab}{{hAj}Al}{cc{}}{ce{}{}}0{c{{j{e}}}{}{}}0{cBh{}}","c":[],"p":[[5,"String",584],[5,"Vec",585],[1,"unit"],[6,"Error",562],[6,"Result",586],[5,"Command",587],[6,"Language",10],[5,"Args",10],[1,"bool"],[17,"Item"],[5,"PathBuf",588],[10,"Iterator",589],[5,"Formatter",590],[8,"Result",590],[5,"ArgMatches",591],[8,"Error",592],[5,"Id",593],[6,"Option",594],[5,"PossibleValue",595],[5,"TypeId",596],[1,"slice"],[5,"Bbc3",62],[5,"Path",588],[5,"Assembly",98],[5,"SourceProgramLine",117],[5,"Assembler",85],[1,"usize"],[6,"SourceProgramWord",117],[5,"HashMap",597],[6,"PWord",117],[5,"Acc",117],[6,"Octal",117],[6,"GeneralOperand",117],[5,"AddressOperand",117],[6,"ConstOperand",117],[6,"SimpleAddressOperand",117],[6,"Address",117],[6,"NumericAddress",117],[6,"Mnemonic",117],[5,"Error",590],[1,"char"],[5,"Parser",598],[1,"str"],[1,"f32"],[1,"i32"],[1,"u32"],[5,"BbcX",507],[6,"Language",529],[5,"ListWriter",542],[5,"Error",599],[10,"LanguageModel",558],[8,"Content",98],[8,"Code",98],[8,"Identifier",117],[8,"SWord",117],[8,"Comment",117],[5,"Grammar",432],[5,"Parser",498],[5,"Core",520],[8,"Result",562]],"b":[[312,"impl-Debug-for-SourceProgramLine"],[313,"impl-Display-for-SourceProgramLine"],[314,"impl-Debug-for-SourceProgramWord"],[315,"impl-Display-for-SourceProgramWord"],[316,"impl-Display-for-PWord"],[317,"impl-Debug-for-PWord"],[318,"impl-Display-for-Acc"],[319,"impl-Debug-for-Acc"],[320,"impl-Display-for-Octal"],[321,"impl-Debug-for-Octal"],[322,"impl-Display-for-GeneralOperand"],[323,"impl-Debug-for-GeneralOperand"],[324,"impl-Display-for-AddressOperand"],[325,"impl-Debug-for-AddressOperand"],[326,"impl-Display-for-ConstOperand"],[327,"impl-Debug-for-ConstOperand"],[328,"impl-Debug-for-SimpleAddressOperand"],[329,"impl-Display-for-SimpleAddressOperand"],[330,"impl-Debug-for-Address"],[331,"impl-Display-for-Address"],[332,"impl-Debug-for-NumericAddress"],[333,"impl-Display-for-NumericAddress"],[334,"impl-Display-for-Mnemonic"],[335,"impl-Debug-for-Mnemonic"],[340,"impl-From%3COption%3Cchar%3E%3E-for-Acc"],[341,"impl-From%3Cchar%3E-for-Acc"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
